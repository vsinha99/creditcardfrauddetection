import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


# loading the dataset to a Pandas DataFrame
credit_card_data = pd.read_csv(r'C:\Users\Varuns\PythonProjects\credit_data\creditcard.csv')


# first 5 rows of the dataset (add print at the front to run it)
credit_card_data.head()
credit_card_data.tail() 


# dataset informations
credit_card_data.info()


# checking the number of missing values in each column
credit_card_data.isnull().sum()


# distribution of legit transactions & fraudulent transactions
credit_card_data['Class'].value_counts()

# the data set is VERY unbalanced
# 0 --> Normal Transaction
# 1 --> Fraudulent Transaction


# separating the data for analysis
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)


# statistical measures of the data
legit.Amount.describe()
fraud.Amount.describe()


# compare the values for both transactions
print(credit_card_data.groupby('Class').mean())

# Build a sample dataset containing similar distribution of normal transactions and fraudulent transactions
# Number of fraudulent transactions --> 492
# randomly samples 492 data samples
legit_sample = legit.sample(n=492)

# Concatenating two DataFrames
new_dataset = pd.concat([legit_sample, fraud], axis=0)
#print(new_dataset.head())
#print(new_dataset.tail())


print(new_dataset['Class'].value_counts())
print(new_dataset.groupby('Class').mean())


# Splitting the data into features & targets
x = new_dataset.drop(columns = 'Class', axis = 1)
y = new_dataset['Class']


# Split the data into training data & testing data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2) 
print(x.shape, x_train.shape, x_test.shape)



# Model Training
# Logistic Regression
model = LogisticRegression(max_iter=10000)

# training the Logistic Regression Model with training data
model.fit(x_train, y_train)


# Model Evaluation
# Accuracy Score, accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print("Accuracy on Training Data: ", training_data_accuracy)


# Accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)
print("Accuracy Score on Test Data: ", test_data_accuracy)











